// <auto-generated />
using System;
using CleanAssetApi.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanAssetApi.API.Migrations
{
    [DbContext(typeof(APIDbContext))]
    partial class APIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CleanAssetApi.Domain.AssetCustodian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("AssetCustodians");
                });

            modelBuilder.Entity("CleanAssetApi.Domain.AssetInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("YearOfManufacture")
                        .HasColumnType("datetime2");

                    b.Property<string>("underwarranty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssetInfo");
                });

            modelBuilder.Entity("CleanAssetApi.Domain.BranchLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BranchLocations");
                });

            modelBuilder.Entity("CleanAssetApi.Domain.CpuMonitorInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CpuMonitorInfos");
                });

            modelBuilder.Entity("CleanAssetApi.Domain.Desktop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CpuMonitorInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustodianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RamSize")
                        .HasColumnType("int");

                    b.Property<string>("SupportOfficer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetInfoId");

                    b.HasIndex("CpuMonitorInfoId");

                    b.HasIndex("CustodianId");

                    b.ToTable("Desktops");
                });

            modelBuilder.Entity("CleanAssetApi.Domain.Laptop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustodianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RamSize")
                        .HasColumnType("int");

                    b.Property<string>("SupportOfficer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetInfoId");

                    b.HasIndex("CustodianId");

                    b.ToTable("Laptops");
                });

            modelBuilder.Entity("CleanAssetApi.Domain.AssetCustodian", b =>
                {
                    b.HasOne("CleanAssetApi.Domain.BranchLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CleanAssetApi.Domain.Desktop", b =>
                {
                    b.HasOne("CleanAssetApi.Domain.AssetInfo", "AssetInfo")
                        .WithMany()
                        .HasForeignKey("AssetInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanAssetApi.Domain.CpuMonitorInfo", "CpuMonitorInfo")
                        .WithMany()
                        .HasForeignKey("CpuMonitorInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanAssetApi.Domain.AssetCustodian", "Custodian")
                        .WithMany()
                        .HasForeignKey("CustodianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetInfo");

                    b.Navigation("CpuMonitorInfo");

                    b.Navigation("Custodian");
                });

            modelBuilder.Entity("CleanAssetApi.Domain.Laptop", b =>
                {
                    b.HasOne("CleanAssetApi.Domain.AssetInfo", "AssetInfo")
                        .WithMany()
                        .HasForeignKey("AssetInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanAssetApi.Domain.AssetCustodian", "Custodian")
                        .WithMany()
                        .HasForeignKey("CustodianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetInfo");

                    b.Navigation("Custodian");
                });
#pragma warning restore 612, 618
        }
    }
}
